name: snapshots-windows

on:
  schedule:
    - cron: "0 00 * * *" # Daily at 00:00 UTC
  workflow_dispatch:

jobs:
  snapshot-windows:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Activity check
        shell: bash
        run: |
          DATEUTC=$(curl -sL https://api.github.com/repos/exult/exult/commits | jq -r '[.[]][0]' | jq -r '.commit.author.date')
          TIMESTAMP=$(date --utc -d "$DATEUTC" +%s)
          DAYS=$(( ($(date --utc +%s) - $TIMESTAMP) / 86400 ))
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo EXULT_REPO_ALIVE=true >> $GITHUB_ENV
          else
            if [ $DAYS -gt 0 ]; then
              echo EXULT_REPO_ALIVE=false >> $GITHUB_ENV
            else
              echo EXULT_REPO_ALIVE=true >> $GITHUB_ENV
            fi
          fi
      - name: Install dependencies
        if: ${{ env.EXULT_REPO_ALIVE }} == 'true'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW32
          install:
            base-devel git p7zip mingw-w64-i686-toolchain mingw-w64-i686-binutils mingw-w64-i686-ntldd mingw-w64-i686-SDL2
            mingw-w64-i686-fluidsynth mingw-w64-i686-libogg mingw-w64-i686-libvorbis mingw-w64-i686-munt-mt32emu
            mingw-w64-i686-zlib mingw-w64-i686-SDL2_image mingw-w64-i686-gtk3 mingw-w64-i686-adwaita-icon-theme
            mingw-w64-i686-libxml2 mingw-w64-i686-freetype mingw-w64-i686-gtk2 mingw-w64-i686-gimp
      - name: Checkout code
        if: ${{ env.EXULT_REPO_ALIVE }} == 'true'
        uses: actions/checkout@master
      - name: Build
        if: ${{ env.EXULT_REPO_ALIVE }} == 'true'
        run: |
          SNAPSHOT_PATH=$(cygpath -m ~/Exult-dist)
          mkdir -p ${SNAPSHOT_PATH}
          make -j2 -f Makefile.mingw DISTPATH=${SNAPSHOT_PATH} DEBUG=1 USECODE_CONTAINER=1 USECODE_DEBUGGER=1 SHOW_NONREADIED_OBJECTS=1 dist studiodist toolsdist plugindist
          pushd content/bgkeyring
          make -j2 -f Makefile.mingw bgkeyringdir=${SNAPSHOT_PATH}/bgkeyring install
          popd
          pushd content/islefaq
          make -j2 -f Makefile.mingw islefaqdir=${SNAPSHOT_PATH}/islefaq install
          popd
          pushd content/sifixes
          make -j2 -f Makefile.mingw sifixesdir=${SNAPSHOT_PATH}/sifixes install
          popd
          echo "EXULT_SNAPSHOT_PATH=${SNAPSHOT_PATH}" >> $GITHUB_ENV
      - name: Create installers
        if: ${{ env.EXULT_REPO_ALIVE }} == 'true'
        run: |
          cd ${{ env.EXULT_SNAPSHOT_PATH }}
          "/c/Program Files (x86)/Inno Setup 6/ISCC.exe" exult_installer.iss
          "/c/Program Files (x86)/Inno Setup 6/ISCC.exe" exult_studio_installer.iss
          "/c/Program Files (x86)/Inno Setup 6/ISCC.exe" exult_tools_installer.iss
          "/c/Program Files/7-Zip/7z.exe" a Gimp20Plugin.exe -mx9 -mmt -sfx7z.sfx GimpPlugin
          "/c/Program Files/7-Zip/7z.exe" -tzip a Keyring.zip -mx9 -mmt bgkeyring/*
          "/c/Program Files/7-Zip/7z.exe" -tzip a SFisland.zip -mx9 -mmt islefaq/*
          "/c/Program Files/7-Zip/7z.exe" -tzip a Sifixes.zip -mx9 -mmt sifixes/*
          echo "EXULT_SNAPSHOT_VERSION=v1.7.0.$(date --utc +'%Y%m%d')" >> $GITHUB_ENV
      - name: Create release
        if: ${{ env.EXULT_REPO_ALIVE }} == 'true'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: snapshot-${{ env.EXULT_SNAPSHOT_VERSION }}
          release_name: Snapshot ${{ env.EXULT_SNAPSHOT_VERSION }}
          body: |
            Snapshots for commit SHA1 ${{ github.sha }}
          draft: false
          prerelease: true
      # Theses pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`.
      # See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
      - name: Upload Exult snapshot
        if: ${{ env.EXULT_REPO_ALIVE }} == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.EXULT_SNAPSHOT_PATH }}/Exultwin32.exe
          asset_name: Exult snapshot
          asset_content_type: application/vnd.microsoft.portable-executable
      - name: Upload Exult Studio snapshot
        if: ${{ env.EXULT_REPO_ALIVE }} == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.EXULT_SNAPSHOT_PATH }}/ExultStudio.exe
          asset_name: Exult Studio snapshot
          asset_content_type: application/vnd.microsoft.portable-executable
      - name: Upload Tools snapshot
        if: ${{ env.EXULT_REPO_ALIVE }} == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.EXULT_SNAPSHOT_PATH }}/ExultTools.exe
          asset_name: Tools snapshot
          asset_content_type: application/vnd.microsoft.portable-executable
      - name: Upload Gimp Plugin snapshot
        if: ${{ env.EXULT_REPO_ALIVE }} == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.EXULT_SNAPSHOT_PATH }}/Gimp20Plugin.exe
          asset_name: Gimp 2.x Plugin snapshot
          asset_content_type: application/vnd.microsoft.portable-executable
      - name: Upload Keyring snapshot
        if: ${{ env.EXULT_REPO_ALIVE }} == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.EXULT_SNAPSHOT_PATH }}/Keyring.zip
          asset_name: Keyring snapshot
          asset_content_type: application/zip
      - name: Upload SourceForge Island snapshot
        if: ${{ env.EXULT_REPO_ALIVE }} == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.EXULT_SNAPSHOT_PATH }}/SFisland.zip
          asset_name: SourceForge Island snapshot
          asset_content_type: application/zip
      - name: Upload SI Fixes snapshot
        if: ${{ env.EXULT_REPO_ALIVE }} == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.EXULT_SNAPSHOT_PATH }}/Sifixes.zip
          asset_name: Serpent Isle Fixes snapshot
          asset_content_type: application/zip
      - name: Finish release
        if: ${{ env.EXULT_REPO_ALIVE }} == 'true'
        uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.create_release.outputs.id }}
