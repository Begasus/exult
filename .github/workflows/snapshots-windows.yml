name: snapshots-windows

on:
  schedule:
    - cron: "0 00 * * *" # Daily at 00:00 UTC
  workflow_dispatch:

jobs:
  activity-check:
    runs-on: windows-latest
    steps:
      - name: Activity check
        shell: bash
        run: |
          DATEUTC=$(curl -sL https://api.github.com/repos/exult/exult/commits | jq -r '[.[]][0]' | jq -r '.commit.author.date')
          TIMESTAMP=$(date --utc -d "$DATEUTC" +%s)
          DAYS=$(( ($(date --utc +%s) - $TIMESTAMP) / 86400 ))
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo EXULT_REPO_ALIVE=true >> $GITHUB_ENV
          else
            if [ $DAYS -gt 0 ]; then
              echo EXULT_REPO_ALIVE=false >> $GITHUB_ENV
            else
              echo EXULT_REPO_ALIVE=true >> $GITHUB_ENV
            fi
          fi
  build-snapshots-windows:
    if: ${{ env.EXULT_REPO_ALIVE }} == 'true'
    needs: activity-check
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    strategy:
      fail-fast: false
      matrix:
        include:
          [{ msystem: MINGW64, arch: x86_64" }, { msystem: MINGW32, arch: i686 }]
    steps:
      - name: Install dependencies
        if: ${{ env.EXULT_REPO_ALIVE }} == 'true'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MSYS
          install:
            base-devel
            git
            p7zip
            mingw-w64-${{ matrix.arch }}-toolchain
            mingw-w64-${{ matrix.arch }}-binutils
            mingw-w64-${{ matrix.arch }}-ntldd
            mingw-w64-${{ matrix.arch }}-SDL2
            mingw-w64-${{ matrix.arch }}-fluidsynth
            mingw-w64-${{ matrix.arch }}-libogg
            mingw-w64-${{ matrix.arch }}-libvorbis
            mingw-w64-${{ matrix.arch }}-munt-mt32emu
            mingw-w64-${{ matrix.arch }}-zlib
            mingw-w64-${{ matrix.arch }}-SDL2_image
            mingw-w64-${{ matrix.arch }}-gtk3
            mingw-w64-${{ matrix.arch }}-adwaita-icon-theme
            mingw-w64-${{ matrix.arch }}-libxml2
            mingw-w64-${{ matrix.arch }}-freetype
            mingw-w64-${{ matrix.arch }}-gtk2
            mingw-w64-${{ matrix.arch }}-gimp
      - name: Checkout code
        uses: actions/checkout@master
        with:
          path: exult-${{ matrix.arch }}
      - name: Build
        run: |
          SNAPSHOT_PATH=$(cygpath -m ~/Exult-dist)
          cd $GITHUB_WORKSPACE/exult-${{ matrix.arch }}
          mkdir -p ${SNAPSHOT_PATH}
          make -j2 -f Makefile.mingw DISTPATH=${SNAPSHOT_PATH} DEBUG=1 USECODE_CONTAINER=1 USECODE_DEBUGGER=1 SHOW_NONREADIED_OBJECTS=1 dist studiodist toolsdist plugindist
          pushd content/bgkeyring
          make -j2 -f Makefile.mingw bgkeyringdir=${SNAPSHOT_PATH}/bgkeyring install
          popd
          pushd content/islefaq
          make -j2 -f Makefile.mingw islefaqdir=${SNAPSHOT_PATH}/islefaq install
          popd
          pushd content/sifixes
          make -j2 -f Makefile.mingw sifixesdir=${SNAPSHOT_PATH}/sifixes install
          popd
          echo "EXULT_SNAPSHOT_PATH=${SNAPSHOT_PATH}" >> $GITHUB_ENV
  create-installers:
    if: ${{ env.EXULT_REPO_ALIVE }} == 'true'
    needs: [activity-check, build-snapshots-windows]
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Create installers
        run: |
          cd ${{ env.EXULT_SNAPSHOT_PATH }}
          "/c/Program Files (x86)/Inno Setup 6/ISCC.exe" exult_installer.iss
          "/c/Program Files (x86)/Inno Setup 6/ISCC.exe" exult_studio_installer.iss
          "/c/Program Files (x86)/Inno Setup 6/ISCC.exe" exult_tools_installer.iss
          "/c/Program Files/7-Zip/7z.exe" a Gimp20Plugin.exe -mx9 -mmt -sfx7z.sfx GimpPlugin-${{ matrix.arch }}
          "/c/Program Files/7-Zip/7z.exe" -tzip a Keyring.zip -mx9 -mmt bgkeyring/*
          "/c/Program Files/7-Zip/7z.exe" -tzip a SFisland.zip -mx9 -mmt islefaq/*
          "/c/Program Files/7-Zip/7z.exe" -tzip a Sifixes.zip -mx9 -mmt sifixes/*
          echo "GITHUB_REF=v1.7.0.$(date --utc +'%Y%m%d')" >> $GITHUB_ENV
      - name: VirusTotal Scan
        id: scan_files
        uses: crazy-max/ghaction-virustotal@v2
        with:
          vt_api_key: ${{ secrets.VT_API_KEY }}
          github_token: ${{ github.token }}
          update_release_body: true
          files: |
            ${{ env.EXULT_SNAPSHOT_PATH }}/Exultwin32.exe
            ${{ env.EXULT_SNAPSHOT_PATH }}/ExultStudio.exe
            ${{ env.EXULT_SNAPSHOT_PATH }}/ExultTools.exe
            ${{ env.EXULT_SNAPSHOT_PATH }}/Gimp20Plugin.exe
      - name: Generate VirusTotal Body
        run: |
          echo "Snapshot ${{ env.GITHUB_REF }}" > ${{ env.EXULT_SNAPSHOT_PATH }}/body.txt
          echo "" >> ${{ env.EXULT_SNAPSHOT_PATH }}/body.txt
          echo "ðŸ›¡ [VirusTotal GitHub Action](https://github.com/crazy-max/ghaction-virustotal) analysis:" >> ${{ env.EXULT_SNAPSHOT_PATH }}/body.txt
          echo "" >> ${{ env.EXULT_SNAPSHOT_PATH }}/body.txt
          analysis="${{ steps.scan_files.outputs.analysis }}"
          while read -d, -r pair; do
            IFS='=' read -r filename analysisURL <<<"$pair"
            echo "* [$(basename $filename)]($analysisURL)" >> ${{ env.EXULT_SNAPSHOT_PATH }}/body.txt
          done <<<"$analysis,"
      - name: Create release
        if: ${{ env.EXULT_REPO_ALIVE }} == 'true'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: snapshot-${{ env.GITHUB_REF }}
          release_name: Snapshot ${{ env.GITHUB_REF }}
          body_path: ${{ env.EXULT_SNAPSHOT_PATH }}/body.txt
          draft: true
          prerelease: false
      # Theses pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`.
      # See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
      - name: Upload Exult snapshot
        if: ${{ env.EXULT_REPO_ALIVE }} == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.EXULT_SNAPSHOT_PATH }}/Exultwin32.exe
          asset_name: Exultwin32.exe
          asset_content_type: application/vnd.microsoft.portable-executable
      - name: Upload Exult Studio snapshot
        if: ${{ env.EXULT_REPO_ALIVE }} == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.EXULT_SNAPSHOT_PATH }}/ExultStudio.exe
          asset_name: ExultStudio.exe
          asset_content_type: application/vnd.microsoft.portable-executable
      - name: Upload Tools snapshot
        if: ${{ env.EXULT_REPO_ALIVE }} == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.EXULT_SNAPSHOT_PATH }}/ExultTools.exe
          asset_name: ExultTools.exe
          asset_content_type: application/vnd.microsoft.portable-executable
      - name: Upload Gimp Plugin snapshot
        if: ${{ env.EXULT_REPO_ALIVE }} == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.EXULT_SNAPSHOT_PATH }}/Gimp20Plugin.exe
          asset_name: Gimp20Plugin.exe
          asset_content_type: application/vnd.microsoft.portable-executable
      - name: Upload Keyring snapshot
        if: ${{ env.EXULT_REPO_ALIVE }} == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.EXULT_SNAPSHOT_PATH }}/Keyring.zip
          asset_name: Keyring.zip
          asset_content_type: application/zip
      - name: Upload SourceForge Island snapshot
        if: ${{ env.EXULT_REPO_ALIVE }} == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.EXULT_SNAPSHOT_PATH }}/SFisland.zip
          asset_name: SFisland.zip
          asset_content_type: application/zip
      - name: Upload SI Fixes snapshot
        if: ${{ env.EXULT_REPO_ALIVE }} == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.EXULT_SNAPSHOT_PATH }}/Sifixes.zip
          asset_name: Sifixes.zip
          asset_content_type: application/zip
      - name: Finish release
        if: ${{ env.EXULT_REPO_ALIVE }} == 'true'
        uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.create_release.outputs.id }}
